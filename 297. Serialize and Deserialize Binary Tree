/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */



 public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        
        //preOrder traversal, BFS
        //points to null when no left or right children
        if( root ==null)
            return "N";
        
        return ""+root.val+" "+serialize(root.left)+" "+serialize(root.right);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        //pass as scanner obj for easy accessing 
        return build(new Scanner(data));
    }
    
    public TreeNode build(Scanner sc){
        
        if(!sc.hasNext())
            return null;
        String s=sc.next();
        
        //no left or right children so points to null "N"
        if(s.equals("N"))
            return null;
        
        TreeNode root=new TreeNode(Integer.parseInt(s));
        root.left= build(sc);
        root.right=build(sc);
        
        return root;
    }
}


// public class Codec {

//     // Encodes a tree to a single string.
//     public static void serialize(TreeNode root,StringBuilder sb)
//     {
// if(root==null)
// {
//     sb.append("null,");
//     return;
// }
// sb.append(root.val+",");
// sb.append(root.left,sb);
// sb.append(root.right,sb);

//     }
//     public String serialize(TreeNode root) 
//     {
// StringBuilder sb=new StringBuilder();
// serialize(root,sb);
// return sb.toString();
//     }

//     // Decodes your encoded data to tree.
//     static int idx=0;

//     public TreeNode deserialize(String arr) 
// {
//     if(idx>=arr.length||arr[idx].equals("null"))
//     {
//         idx++;
//         return null;
//     }
//     TreeNode node=new TreeNode(Integer.parseInt(arr[idx++]));
//     node.left=deserialize(arr);
//     node.right=deserialize(arr);

//     return node;
// }

//     public TreeNode deserialize(String arr) 
//     {

//       String arr[]=str.spilt(",");
//       return  deserialize(arr);
        
//     }
// }

// // Your Codec object will be instantiated and called as such:
// // Codec ser = new Codec();
// // Codec deser = new Codec();
// // TreeNode ans = deser.deserialize(ser.serialize(root));
