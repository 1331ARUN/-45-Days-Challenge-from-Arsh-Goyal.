class Solution 
{
    public boolean isSafe(int row,int col,char[][]board)
    {

        for(int j=0;j<board.length;j++)
        {

            if(board[row][j]=='Q')
            {
                return false;
            }
        }


        for(int j=0;j<board.length;j++)
        {
if(board[j][col]=='Q')
{

    return false;
}

        }

    for(int j=0;j<board.length;j++)
        {
if(board[j][col]=='Q')
{

    return false;
}

        }
        //upper left

        int r=row;

        for(int c=col;c>=0&&r>=0;c--,r--)
        {

            if(board[r][c]=='Q')
            {

                return false;
            }
        }

        //upper right

        r=row;

        for(int c=col;c<board.length &&r>=0;r--,c++)
{
  if(board[r][c]=='Q')
            {

                return false;
            }
        }

r=row;
for(int c=col;c>=0 && r<board.length;r++,c--)
{

      if(board[r][c]=='Q')
            {

                return false;
            }
        }

for(int c=col;c<board.length&&r<board.length;c++,r++)
{

      if(board[r][c]=='Q')
            {

                return false;
            }
}

return true;
    }
    
public void saveboard(char[][]board,List<List<String>>allbords)
    {

        String row="";

        List<String>newboards=new ArrayList<>();

        for(int i=0;i<board.length;i++)
        {

            row="";

            for(int j=0;j<board[0].length;j++)
            {

                if(board[i][j]=='Q')
                {
                    row+='Q';
                }
                else{
                    row+='.';
                }
            }
            newboards.add(row);
        }
        allbords.add(newboards);
    }
public void  helper(char[][]board,List<List<String>>allbords,int col)
    {
        if(col==board.length)
        {
            saveboard(board,allbords);
            return;
        }

for(int row=0;row<board.length;row++)
{
    if(isSafe(row,col,board))
    {

        board[row][col]='Q';
        helper(board,allbords,col+1);
        board[row][col]='.';
    }
}
    }

    public List<List<String>> solveNQueens(int n) 
    {
        List<List<String>>allbords=new ArrayList<>();

        char[][]board=new char[n][n];

        helper(board,allbords,0);
        return allbords;
    }
}
