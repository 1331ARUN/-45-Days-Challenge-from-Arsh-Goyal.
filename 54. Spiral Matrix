class Solution 
{
    public List<Integer> spiralOrder(int[][] matrix)
     {
         List<Integer>ans= new ArrayList<>();
         int n=matrix.length;
     int top=0;
     int down=n-1;
     int left=0;
     int right=matrix[0].length-1;
int direction=0;
while(top<=down && left<=right)
{
if(direction==0)
{
                for(int i=left;i<=right;i++){
                    ans.add(matrix[top][i]);
                }
                top+=1;
            }
            else if(direction==1){
                for(int i=top;i<=down;i++){
                    ans.add(matrix[i][right]);
                }
                right-=1;
            }
            else if(direction==2)
            {
                for(int i=right;i>=left;i--)
                {
                    ans.add(matrix[down][i]);
                }
                down-=1;
            }
            
            else if(direction==3)
            {
                for(int i=down;i>=top;i--)
                {
                    ans.add(matrix[i][left]);
                }
                left+=1;
            }
            direction=(direction+1)%4;
}
            return ans;
     }
}


// int rows=0;
// int rowe=matrix.length-1;
// int cols=0;
// int cole=matrix[0].length-1;

// while(rows<=rowe&&cols<=cole)
// {
//     for(int i=cols;i<=cole;i++)
//     {
//         ans.add(matrix[rows][i]);
//     }
//     rows++;

//     for(int i=rows;i<=rowe;i++)
//     {
//         namo.add(matrix[i][cole]);
//     }
//     cole--;

// if(rows>rowe||cols>cole)

// break;
//     for(int i=cole;i>=cols;i--)
//     {
//     ans.add(matrix[rowe][i]);
//     }
//     rowe--;

//     for(int i=rowe;i>=rows;i--)
//     {
//         ans.add(matrix[i][cols]);
//     }
//     cols++;
// }
// return ans;

//         }
//     }
