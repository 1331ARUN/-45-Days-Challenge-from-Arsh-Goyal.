class Solution {
    int count=0;
    public int reversePairs(int[] nums) 
    {
        mergeSort(0,nums.length-1,nums);
        
        return count;
    }
    private void mergeSort(int start, int end, int[] nums){
        
        if(start<end){
        int mid=(start+end)/2;
        mergeSort(start,mid,nums);
        mergeSort(mid+1,end,nums);
            
        merge(start,mid, mid+1,end, nums);
        }

    }
    private void merge(int lstart, int lend, int rstart, int rend, int[] nums){
        int[] larr=Arrays.copyOfRange(nums,lstart, lend+1);
        int[] rarr=Arrays.copyOfRange(nums,rstart, rend+1);
        int li=0;
        int ri=0;
        int i=lstart;
    
        int cl=0;
        int rl=0;
        for(cl=0;cl<larr.length;cl++)
        {
    while(rl<rarr.length && (long)larr[cl]>2*(long)rarr[rl])
    {
                rl++;
    }
            count+=rl-0;
        }

        while(li<larr.length && ri< rarr.length)
        {
            if(larr[li]<=rarr[ri])
            {
                nums[i]=larr[li];
                i++;
                li++;
            }
            else
            {
                nums[i]=rarr[ri];
                i++;
                ri++;
            }
        }
        while(li<larr.length)
        {
            nums[i]=larr[li];
            i++;
            li++;
        }
        while(ri<rarr.length)
        {
             nums[i]=rarr[ri];
            i++;
            ri++;
        }
        
    }
}
