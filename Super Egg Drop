class Solution 
{
public int superEggDrop(int K, int N) 
{
        int[][] dp = new int[N + 1][K + 1];
        int m = 0;
        while (dp[m][K] < N)
        {
            ++m;
            for (int k = 1; k <= K; ++k)
            dp[m][k] = dp[m - 1][k - 1] + dp[m - 1][k] + 1;
        }
        return m;
    }
}


// class Solution 
// {
//     public int superEggDrop(int n, int k) 
//     {
//         int dp[][]=new int [n+1][k+1];

//        for(int j=1;j<=k;j++)
//         {

//             dp[1][j]=j;
//         }
//         for(int i=1;i<=n;++i)
//         {

//             dp[i][0]=0;
//             dp[i][1]=1;
//         }

       
//         for(int i=2;i<=n;i++)
//         {

//             for(int j=2;j<=k;j++)
//             {

//                 int res=Integer.MAX_VALUE;

//                 for(int t=1;t<=j;++t)
//                 {

//                     int temp1=1+dp[i-1][t-1];

//                     int temp2=1+dp[i][j-t];

//                     int ans=Math.max(temp1,temp2);
                    

//                     res=Math.min(res,ans);
//                 }
//                 dp[i][j]=res;
//             }
//         }
//         return dp[n][k];


    
//     }
// }
