class Solution
{
    // Return the size of the largest sub-tree which is also a BST
    
    static class NodeValue
    {
        int maxValue;
        int minValue;
        int size;
        
        NodeValue(int minValue, int maxValue,int size)
        {
            this.maxValue = maxValue;
            this.minValue = minValue;
            this.size = size;
        }
    }
    static NodeValue largestBstHelper(Node root)
    {
        if(root == null)
        {
            return new NodeValue(Integer.MAX_VALUE,Integer.MIN_VALUE,0);
        }
        
        NodeValue left = largestBstHelper(root.left);
        
        NodeValue right = largestBstHelper(root.right);
        
        if(root.data > left.maxValue && root.data < right.minValue)
        {
        return new NodeValue(Math.min(root.data,left.minValue),Math.max(root.data,right.maxValue),left.size+right.size+1);
        }
        else
        {
        return new NodeValue(Integer.MIN_VALUE,Integer.MAX_VALUE,Math.max(left.size,right.size));
        }
    }
    static int largestBst(Node root)
    {
        // Write your code here
        return largestBstHelper(root).size;
        
    }
